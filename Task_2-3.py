# Дан список:
# ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']
#
# Необходимо его обработать — обособить каждое целое число (вещественные не трогаем) кавычками (добавить кавычку до и кавычку после элемента списка, являющегося числом) и дополнить нулём до двух целочисленных разрядов:
# ['в', '"', '05', '"', 'часов', '"', '17', '"', 'минут', 'температура', 'воздуха', 'была', '"', '+05', '"', 'градусов']
#
# Сформировать из обработанного списка строку:
# в "05" часов "17" минут температура воздуха была "+05" градусов
#
# Подумать, какое условие записать, чтобы выявить числа среди элементов списка? Как модифицировать это условие для чисел со знаком?
# Примечание: если обособление чисел кавычками не будет получаться - можете вернуться к его реализации позже. Главное: дополнить числа до двух разрядов нулём!
spisok_data = ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']
i = 0
while i < len(spisok_data): #Цикл по элементам списка
    if spisok_data[i].isdigit() or ((spisok_data[i][0] in "+-") and spisok_data[i][1:].isdigit()): #Проверяем элемент списка цифра или нет ИЛИ знал +- и цифра
        if spisok_data[i][0] in "+-":
            spisok_data[i] = spisok_data[i][0] + spisok_data[i][1:].zfill(2) #Если первый знак "+" или "-" то, добавляем в элемент списка сначала знак, потом число дополненное "0" в начале если число < 10
        else:
            spisok_data[i] = spisok_data[i].zfill(2)#добавляем в элемент списка число дополненное "0" в начале если число < 10
        spisok_data.insert(i, '"') # вставляем кавычки перед элементом содержащим число
        spisok_data.insert(i + 2, '"') # и после
        i += 2
    i += 1
print(spisok_data) #Выводим спиок для проверки, что алгоритм отработал верно
# Собираем строку из элементов списка. Пришлось поломать голову как добавить пробел после числа выделенного кавычками
result = ''
check = 0
for _ in spisok_data:
    # check = 0
    if _.isalpha() and _ != '"':
        result += _ + " "
    elif _ == '"':
        check += 1
        if check < 2:
            result += _
        else:
            result += _ + " "
            check = 0
    else:result += _
print(result)
